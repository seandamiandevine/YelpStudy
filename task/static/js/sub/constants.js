const subject_id = uniqueId; //unique id number generated by psiTurk

jsPsych.data.addProperties({

  subject: subject_id

});

const debugmode = false // goes through the task quickly, skips confidence trials, and requires no response to be sure everything loads right

const ntrials = choice_sets.length // number of trials participants see (total)
const nchoice = ntrials/2 // number of choice trials
const nrating = ntrials - nchoice // number of rating trials
const nbreaks = 4 // number of breaks to give subjects (will be evenly spread across trials)
const ncatch = 5 // number of catch trials where participants are asked to chosoe the highest rated item
const trialdur = (debugmode === true) ? 500 : 5000; // time for which yelp info remains up (in ms.)
const timeout = (debugmode === true) ? 500 : 5000; // time for which subjects can make a choice or rating
const iti = 250 // inter trial interval (in ms.)
const trialList = _.shuffle(Array((ntrials-ncatch)/2).fill(['r', 'c']).flat()) // list of intersperced rating/choice trials
const catchtrials = choice_sets.slice(0, ncatch) // always the same catch trials
choice_sets = _.shuffle(choice_sets.slice(ncatch, choice_sets.length)) // shuffled choice set (without catch trials)

//insert catch trials
choicetrials = [];
for(i in _.range(0, trialList.length)) { if(trialList[i] == 'c') choicetrials.push(i); };
tmp = _.sample(choicetrials, 5);
cc = 0;
for(i in tmp.sort((a, b) => b - a)) {
  choice_sets.splice(tmp[i], 0, catchtrials[cc]); // add catch trials back in
  trialList.splice(tmp[i], 0, 'c') // catch trials are always choice trials
  cc++;
};

var catchtrials_ind = [];
var catchtrialsX = []; for(i in catchtrials){catchtrialsX.push(catchtrials[i].X)};
for(i in _.range(ntrials)) {
  if(catchtrialsX.indexOf(choice_sets[i].X) >= 0) {
    catchtrials_ind.push(1)
  } else {
    catchtrials_ind.push(0)
  }
};

var fs = {

	type: 'fullscreen', // setup fullscreen mode
  fullscreen_mode: true,
  on_start: function(){
    document.body.style.background = "white";

   }
};

function produceYelpHTML(images, names, ratings, nratings, prices, category, is_choice, rate_name, instruction_mode) {

  if(instruction_mode !== undefined) dontflicker();

  if(names.length < 3) ncol = names.length ;
  if(names.length >= 3) ncol = 3;

  h =
  '<head>'+
      '<meta charset="UTF-8">'+
      '<meta name="viewport" content="width=device-width, initial-scale=1.0">'+
      '<link rel="stylesheet" href="static/css/yelp.css">'+
  '</head>' +
  '<body>' +
  '<div class="grid-container" style="grid-template-columns: repeat('+ncol+', minmax(0, 1fr));">';

  if(is_choice) choices = [];

  for(i in _.range(names.length)) {

    ind = (i*1+ 1);
    image = images[i];
    name = names[i];
    price = prices[i];
    nrev = nratings[i];

    if(ratings[i] == 1) rating = 'stars-regular-1';
    if(ratings[i] == 1.5) rating = 'stars-regular-1-half';
    if(ratings[i] == 2) rating = 'stars-regular-2';
    if(ratings[i] == 2.5) rating = 'stars-regular-2-half';
    if(ratings[i] == 3) rating = 'stars-regular-3';
    if(ratings[i] == 3.5) rating = 'stars-regular-3-half';
    if(ratings[i] == 4) rating = 'stars-regular-4';
    if(ratings[i] == 4.5) rating = 'stars-regular-4-half';
    if(ratings[i] == 5) rating = 'stars-regular-5';


    if(rate_name == name){box_highlight = 'style="border: thick solid blue;" >'} else {box_highlight = '>'};
    if(name.length >= 27) {fontsize = '15px'} else {fontsize = ''};

    cell =
      '<li class="item">' +
          '<div class="item-container" '+ box_highlight +
              '<div class="gallery">'+
                  '<div class="slider">'+
                      '<a href="#">'+
                          '<img src="'+image+'" alt="">'+
                      '</a>'+
                  '</div>'+
              '</div>'+
              '<div class="info">'+
                  '<div class="attributes">'+
                      '<div class="main-attributes">'+
                          '<h4 class="heading heading-4" style = "text-align:left; font-size:'+fontsize+'">'+
                              '<p>'+
                               name +
                              '</p>'+
                          '</h4>'+
                          '<div class="rating" style = "position:relative">'+
                              '<div class="stars '+ rating+'" style="position: absolute; left: 0px;">'+
                              '</div>'+
                              '<div class="review-count" style="position: absolute; left: 125px;">'+
                                  '<span>'+
                                      nrev.toString() +
                                  '</span>'+
                              '</div>'+
                          '<div class="categories" style="position:absolute; left: 0px; top: 35px;">'+
                              '<span class="category" style="font-size: large;">'+
                                  '<p>'+
                                      '<b>'+Array(price).fill('$').join(" ")+'</b> &bull; '+ category.charAt(0).toUpperCase() + category.slice(1) +
                                  '</p>'+
                              '</span>'+
                            '</div>'+
                          '</div>'+
                      '</div>'+
                    '</div>'+
                  '</li>'

     if (is_choice) {

       choices[i] = cell

     } else {

       h = h.concat('<div class="grid-item">' + cell + '</div>');

     }

  }

  h.concat('</div>')

  if(is_choice) {return(choices)} else {return(h)}


};

dontflicker = function() { // avoids flickering screen when switching between jspsych.css and yelp.css

  document.getElementById('jspsych-content').style.opacity = '0'

  var cssId = 'yelp';
  if (!document.getElementById(cssId)) {
    var head  = document.getElementsByTagName('head')[0];
    var link  = document.createElement('link');
    link.id   = cssId;
    link.rel  = 'stylesheet';
    link.type = 'text/css';
    link.href = 'static/css/yelp.css';
    link.media = 'all';
    head.appendChild(link);

  };

  document.getElementById('jspsych-content').style.opacity = '1'

}
